using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DFSA
{
    class Program
    {
        public class Data
        {
            public string Name;
            public int H;
            public int SC;
            public List<Data> MyCildren = new List<Data>();
        }

        public class Memory
        {
            public List<Data> OpenList = new List<Data>();
            public List<Data> CloseList = new List<Data>();
        }

        static public List<Data> Datas;

        static public List<Memory> Tree;

        static void Main(string[] args)
        {
            Input_Tree();
            //PrintTree();
           Depth_Algorithm();
            Out_Put();
        }

        static public void Input_Tree()
        {
            Datas = new List<Data>();

            Data pnn = new Data();

            //Parent1
            pnn.Name = "S";
            pnn.H = 0;
            pnn.SC = 0;

            //Cildern1
            Data pnc = new Data();
            pnc.Name = "A";
            pnc.H = 7;
            pnc.SC = 1;
            pnn.MyCildren.Add(pnc);
            //Childer2
            pnc = new Data();
            pnc.Name = "B";
            pnc.H = 10;
            pnc.SC = 8;
            pnn.MyCildren.Add(pnc);
            //Childer3
            pnc = new Data();
            pnc.Name = "C";
            pnc.H = 5;
            pnc.SC = 4;
            pnn.MyCildren.Add(pnc);

            Datas.Add(pnn);

            //Parent2
            pnn = new Data();
            pnn.Name = "A";
            pnn.H = 7;
            pnn.SC = 0;

            //Cildern1
            pnc = new Data();
            pnc.Name = "D";
            pnc.H = 4;
            pnc.SC = 5;
            pnn.MyCildren.Add(pnc);
            //Childer2
            pnc = new Data();
            pnc.Name = "H";
            pnc.H = 6;
            pnc.SC = 12;
            pnn.MyCildren.Add(pnc);

            Datas.Add(pnn);

            //Parent3
            pnn = new Data();
            pnn.Name = "B";
            pnn.H = 10;
            pnn.SC = 0;

            //Cildern1
            pnc = new Data();
            pnc.Name = "H";
            pnc.H = 6;
            pnc.SC = 1;
            pnn.MyCildren.Add(pnc);
            //Childer2
            pnc = new Data();
            pnc.Name = "G1";
            pnc.H = 0;
            pnc.SC = 4;
            pnn.MyCildren.Add(pnc);
            //Childer3
            pnc = new Data();
            pnc.Name = "J";
            pnc.H = 8;
            pnc.SC = 4;
            pnn.MyCildren.Add(pnc);

            Datas.Add(pnn);

            //Parent4
            pnn = new Data();
            pnn.Name = "C";
            pnn.H = 5;
            pnn.SC = 0;

            //Cildern1
            pnc = new Data();
            pnc.Name = "E";
            pnc.H = 7;
            pnc.SC = 2;
            pnn.MyCildren.Add(pnc);
            //Childer2
            pnc = new Data();
            pnc.Name = "F";
            pnc.H = 9;
            pnc.SC = 6;
            pnn.MyCildren.Add(pnc);

            Datas.Add(pnn);

            //Parent5
            pnn = new Data();
            pnn.Name = "D";
            pnn.H = 4;
            pnn.SC = 0;

            //Cildern1
            pnc = new Data();
            pnc.Name = "H";
            pnc.H = 6;
            pnc.SC = 2;
            pnn.MyCildren.Add(pnc);

            Datas.Add(pnn);

            //Parent6
            pnn = new Data();
            pnn.Name = "E";
            pnn.H = 7;
            pnn.SC = 0;

            //Cildern1
            pnc = new Data();
            pnc.Name = "F";
            pnc.H = 9;
            pnc.SC = 10;
            pnn.MyCildren.Add(pnc);

            Datas.Add(pnn);

            //Parent7
            pnn = new Data();
            pnn.Name = "F";
            pnn.H = 9;
            pnn.SC = 0;

            //Cildern1
            pnc = new Data();
            pnc.Name = "G2";
            pnc.H = 0;
            pnc.SC = 2;
            pnn.MyCildren.Add(pnc);

            Datas.Add(pnn);

            //Parent8
            pnn = new Data();
            pnn.Name = "G1";
            pnn.H = 0;
            pnn.SC = 0;

            Datas.Add(pnn);

            //Parent9
            pnn = new Data();
            pnn.Name = "H";
            pnn.H = 6;
            pnn.SC = 0;

            //Cildern1
            pnc = new Data();
            pnc.Name = "J";
            pnc.H = 8;
            pnc.SC = 4;
            pnn.MyCildren.Add(pnc);

            Datas.Add(pnn);

            //Parent10
            pnn = new Data();
            pnn.Name = "J";
            pnn.H = 8;
            pnn.SC = 0;

            //Cildern1
            pnc = new Data();
            pnc.Name = "G2";
            pnc.H = 0;
            pnc.SC = 2;
            pnn.MyCildren.Add(pnc);

            Datas.Add(pnn);

            //Parent11
            pnn = new Data();
            pnn.Name = "G2";
            pnn.H = 0;
            pnn.SC = 0;

            Datas.Add(pnn);
        }

        static public void PrintTree()
        {
            int i = 0, j = 0;

            for (i = 0; i < Datas.Count; i++)
            {
                Console.WriteLine(Datas[i].Name + "---------");
                for (j = 0; j < Datas[i].MyCildren.Count; j++)
                {
                    Console.WriteLine(Datas[i].MyCildren[j].Name);
                }
            }

        }

        static public void Depth_Algorithm()
        {
            int Flag = 0;
            Tree = new List<Memory>();List<Data> OpenList = new List<Data>(); 
             List<Data> Temp = new List<Data>();List<Data> CloseList = new List<Data>();
            Data MyData = new Data(); MyData = Datas[0];
            OpenList.Add(MyData);
            Memory New = new Memory();New.OpenList = OpenList;
            New.CloseList = new List<Data>();
            Tree.Add(New);
            while (true)
            { int i = 0, j = 0, k = 0, z = 0;
                if (MyData.Name == "G1" || MyData.Name == "G2"){
                    break;
                }
                 for (i = 0; i < Datas.Count; i++){
                 if (Datas[i].Name == OpenList[0].Name){
                        Temp = new List<Data>();
                   if (OpenList[0].Name == "G1" || OpenList[0].Name == "G2"){
                            MyData = new Data();
                            MyData.Name = OpenList[0].Name;
                            break; CloseList.Add(OpenList[0]);

                            if (Datas[i].MyCildren.Count > 0){
                                for (k = 0; k < Datas[i].MyCildren.Count; k++)
                                {Flag = 0;
                                 for (z = 0; z < OpenList.Count; z++){
                                        if (Datas[i].MyCildren[k].Name == OpenList[z].Name)
                                     { Flag = 1; break; } }
                                    if (Flag == 0){
                                        for (z = 0; z < CloseList.Count; z++){
                                            if (Datas[i].MyCildren[k].Name == CloseList[z].Name)
                                             { Flag = 1; break; }   } }
                                    if (Flag == 0){ Temp.Add(Datas[i].MyCildren[k]); }
                                }
                            }
                            for (j = 1; j < OpenList.Count; j++){
                                Temp.Add(OpenList[j]);
                            }
                            OpenList = Temp;
                            New = new Memory();New.OpenList = OpenList;
                            for (j = 0; j < CloseList.Count; j++) {
                                New.CloseList.Add(CloseList[j]);}
                            Tree.Add(New);}
                        else
                        {
                            CloseList.Add(OpenList[0]);
                            if (Datas[i].MyCildren.Count > 0){
                            for (k = 0; k < Datas[i].MyCildren.Count; k++){
                                 Flag = 0;
                                    for (z = 0; z < OpenList.Count; z++){
                                        if (Datas[i].MyCildren[k].Name == OpenList[z].Name)
                                        { Flag = 1; break; }
                                    }
                                    if (Flag == 0){
                                        for (z = 0; z < CloseList.Count; z++){
                                         if (Datas[i].MyCildren[k].Name == CloseList[z].Name)
                                            { Flag = 1; break; }} }
                                    if (Flag == 0){ Temp.Add(Datas[i].MyCildren[k]); } }
                            }
                            for (j = 1; j < OpenList.Count; j++){
                                Temp.Add(OpenList[j]);
                            }
                            OpenList = Temp; New = new Memory();
                            New.OpenList = OpenList;
                            for (j = 0; j < CloseList.Count; j++){
                                New.CloseList.Add(CloseList[j]);
                            }
                            Tree.Add(New);
                        }
                        break;
                    }                }}}

            
        

        static public void Out_Put()
        {
            Console.WriteLine();
            Console.WriteLine("                            Depth_First Algorith                   \n");
            Console.WriteLine("OpenList                CloseList");
            int i = 0, j = 0;
            for (i = 0; i < Tree.Count; i++)
            {
                Console.Write("[");
                for (j = 0; j < Tree[i].OpenList.Count; j++)
                {
                    if (j == Tree[i].OpenList.Count - 1)
                        Console.Write(Tree[i].OpenList[j].Name + "]");
                    else
                        Console.Write(Tree[i].OpenList[j].Name + ",");
                }
                if (Tree[i].CloseList.Count == 0)
                {
                    Console.Write("                     [");
                    Console.WriteLine("]");
                }
                else
                {
                    Console.Write("                [");
                    for (j = 0; j < Tree[i].CloseList.Count; j++)
                    {
                        if (j == Tree[i].CloseList.Count - 1)
                            Console.WriteLine(Tree[i].CloseList[j].Name + "]");
                        else
                            Console.Write(Tree[i].CloseList[j].Name + ",");
                        
                    }
                }
            }
            j = Console.Read();
        }
    }
}
